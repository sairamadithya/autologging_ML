
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, BaggingClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report
from sklearn.linear_model import LinearRegression, SGDRegressor, Ridge, ElasticNet
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor, BaggingRegressor, HistGradientBoostingRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error, r2_score, mean_squared_log_error, median_absolute_error, max_error
def train_and_log_classification(x_train,y_train,x_test,y_test):
                model=['svm-linear','svm-rbf','svm-poly','knn','naive bayes','decision tree','random forest','adaboost','gradient boost','xgboost','logistic regression','bagging classifier']
                dat=pd.DataFrame(columns=['model','training-accuracy','training-precision','training-recall','training-f1','training-confusion matrix','validation-accuracy','validation-precision','validation-recall','validation-f1','validation-confusion matrix'])
                dat['model']=model
                accuracy_t=[]
                precision_t=[]
                recall_t=[]
                f1_t=[]
                confusion_matrix_t=[]
                accuracy_v=[]
                precision_v=[]
                recall_v=[]
                f1_v=[]
                confusion_matrix_v=[]
                for i in model:
                    if i=='svm-linear':
                        m=SVC(kernel='linear')
                        m.fit(x_train,y_train)
                        acc_sl_v= accuracy_score(y_test,m.predict(x_test))
                        prc_sl_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_sl_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_sl_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_sl_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_sl_v*100)
                        precision_v.append(prc_sl_v*100)
                        recall_v.append(rec_sl_v*100)
                        f1_v.append(f_sl_v*100)
                        confusion_matrix_v.append(cm_sl_v)
                        acc_sl_t= accuracy_score(y_train,m.predict(x_train))
                        prc_sl_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_sl_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_sl_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_sl_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_sl_t*100)
                        precision_t.append(prc_sl_t*100)
                        recall_t.append(rec_sl_t*100)
                        f1_t.append(f_sl_t*100)
                        confusion_matrix_t.append(cm_sl_t)
                    elif i=='svm-rbf':
                        m=SVC(kernel='rbf')
                        m.fit(x_train,y_train)
                        acc_sr_v= accuracy_score(y_test,m.predict(x_test))
                        prc_sr_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_sr_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_sr_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_sr_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_sr_v*100)
                        precision_v.append(prc_sr_v*100)
                        recall_v.append(rec_sr_v*100)
                        f1_v.append(f_sr_v*100)
                        confusion_matrix_v.append(cm_sr_v)
                        acc_sr_t= accuracy_score(y_train,m.predict(x_train))
                        prc_sr_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_sr_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_sr_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_sr_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_sr_t*100)
                        precision_t.append(prc_sr_t*100)
                        recall_t.append(rec_sr_t*100)
                        f1_t.append(f_sr_t*100)
                        confusion_matrix_t.append(cm_sr_t)
                    elif i=='svm-poly':
                        m=SVC(kernel='poly')
                        m.fit(x_train,y_train)
                        acc_sp_v= accuracy_score(y_test,m.predict(x_test))
                        prc_sp_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_sp_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_sp_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_sp_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_sp_v*100)
                        precision_v.append(prc_sp_v*100)
                        recall_v.append(rec_sp_v*100)
                        f1_v.append(f_sp_v*100)
                        confusion_matrix_v.append(cm_sp_v)
                        acc_sp_t= accuracy_score(y_train,m.predict(x_train))
                        prc_sp_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_sp_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_sp_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_sp_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_sp_t*100)
                        precision_t.append(prc_sp_t*100)
                        recall_t.append(rec_sp_t*100)
                        f1_t.append(f_sp_t*100)
                        confusion_matrix_t.append(cm_sp_t)
                    elif i=='knn':
                        m=KNeighborsClassifier()
                        m.fit(x_train,y_train)
                        acc_k_v= accuracy_score(y_test,m.predict(x_test))
                        prc_k_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_k_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_k_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_k_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_k_v*100)
                        precision_v.append(prc_k_v*100)
                        recall_v.append(rec_k_v*100)
                        f1_v.append(f_k_v*100)
                        confusion_matrix_v.append(cm_k_v)
                        acc_k_t= accuracy_score(y_train,m.predict(x_train))
                        prc_k_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_k_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_k_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_k_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_k_t*100)
                        precision_t.append(prc_k_t*100)
                        recall_t.append(rec_k_t*100)
                        f1_t.append(f_k_t*100)
                        confusion_matrix_t.append(cm_k_t)
                    elif i=='naive bayes':
                        m=GaussianNB()
                        m.fit(x_train,y_train)
                        acc_g_v= accuracy_score(y_test,m.predict(x_test))
                        prc_g_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_g_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_g_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_g_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_g_v*100)
                        precision_v.append(prc_g_v*100)
                        recall_v.append(rec_g_v*100)
                        f1_v.append(f_g_v*100)
                        confusion_matrix_v.append(cm_g_v)
                        acc_g_t= accuracy_score(y_train,m.predict(x_train))
                        prc_g_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_g_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_g_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_g_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_g_t*100)
                        precision_t.append(prc_g_t*100)
                        recall_t.append(rec_g_t*100)
                        f1_t.append(f_g_t*100)
                        confusion_matrix_t.append(cm_g_t)
                    elif i=='decision tree':
                        m=DecisionTreeClassifier()
                        m.fit(x_train,y_train)
                        acc_dt_v= accuracy_score(y_test,m.predict(x_test))
                        prc_dt_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_dt_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_dt_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_dt_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_dt_v*100)
                        precision_v.append(prc_dt_v*100)
                        recall_v.append(rec_dt_v*100)
                        f1_v.append(f_dt_v*100)
                        confusion_matrix_v.append(cm_dt_v)
                        acc_dt_t= accuracy_score(y_train,m.predict(x_train))
                        prc_dt_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_dt_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_dt_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_dt_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_dt_t*100)
                        precision_t.append(prc_dt_t*100)
                        recall_t.append(rec_dt_t*100)
                        f1_t.append(f_dt_t*100)
                        confusion_matrix_t.append(cm_dt_t)
                    elif i=='random forest':
                        m=RandomForestClassifier()
                        m.fit(x_train,y_train)
                        acc_rf_v= accuracy_score(y_test,m.predict(x_test))
                        prc_rf_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_rf_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_rf_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_rf_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_rf_v*100)
                        precision_v.append(prc_rf_v*100)
                        recall_v.append(rec_rf_v*100)
                        f1_v.append(f_rf_v*100)
                        confusion_matrix_v.append(cm_rf_v)
                        acc_rf_t= accuracy_score(y_train,m.predict(x_train))
                        prc_rf_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_rf_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_rf_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_rf_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_rf_t*100)
                        precision_t.append(prc_rf_t*100)
                        recall_t.append(rec_rf_t*100)
                        f1_t.append(f_rf_t*100)
                        confusion_matrix_t.append(cm_rf_t)
                    elif i=='adaboost':
                        m=AdaBoostClassifier()
                        m.fit(x_train,y_train)
                        acc_ada_v= accuracy_score(y_test,m.predict(x_test))
                        prc_ada_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_ada_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_ada_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_ada_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_ada_v*100)
                        precision_v.append(prc_ada_v*100)
                        recall_v.append(rec_ada_v*100)
                        f1_v.append(f_ada_v*100)
                        confusion_matrix_v.append(cm_ada_v)

                        acc_ada_t= accuracy_score(y_train,m.predict(x_train))
                        prc_ada_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_ada_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_ada_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_ada_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_ada_t*100)
                        precision_t.append(prc_ada_t*100)
                        recall_t.append(rec_ada_t*100)
                        f1_t.append(f_ada_t*100)
                        confusion_matrix_t.append(cm_ada_t)
                    elif i=='gradient boost':
                        m=GradientBoostingClassifier()
                        m.fit(x_train,y_train)
                        acc_gb_v= accuracy_score(y_test,m.predict(x_test))
                        prc_gb_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_gb_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_gb_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_gb_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_gb_v*100)
                        precision_v.append(prc_gb_v*100)
                        recall_v.append(rec_gb_v*100)
                        f1_v.append(f_gb_v*100)
                        confusion_matrix_v.append(cm_gb_v)

                        acc_gb_t= accuracy_score(y_train,m.predict(x_train))
                        prc_gb_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_gb_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_gb_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_gb_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_gb_t*100)
                        precision_t.append(prc_gb_t*100)
                        recall_t.append(rec_gb_t*100)
                        f1_t.append(f_gb_t*100)
                        confusion_matrix_t.append(cm_gb_t)
                    elif i=='xgboost':
                        lab=LabelEncoder()
                        y_train=lab.fit_transform(y_train)
                        y_test=lab.fit_transform(y_test)
                        m=XGBClassifier()
                        m.fit(x_train,y_train)
                        acc_xgb_v= accuracy_score(y_test,m.predict(x_test))
                        prc_xgb_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_xgb_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_xgb_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_xgb_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_xgb_v*100)
                        precision_v.append(prc_xgb_v*100)
                        recall_v.append(rec_xgb_v*100)
                        f1_v.append(f_xgb_v*100)
                        confusion_matrix_v.append(cm_xgb_v)

                        acc_xgb_t= accuracy_score(y_train,m.predict(x_train))
                        prc_xgb_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_xgb_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_xgb_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_xgb_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_xgb_t*100)
                        precision_t.append(prc_xgb_t*100)
                        recall_t.append(rec_xgb_t*100)
                        f1_t.append(f_xgb_t*100)
                        confusion_matrix_t.append(cm_xgb_t)
                    elif i=='logistic regression':
                        m=LogisticRegression()
                        m.fit(x_train,y_train)
                        acc_lrc_v= accuracy_score(y_test,m.predict(x_test))
                        prc_lrc_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_lrc_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_lrc_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_lrc_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_lrc_v*100)
                        precision_v.append(prc_lrc_v*100)
                        recall_v.append(rec_lrc_v*100)
                        f1_v.append(f_lrc_v*100)
                        confusion_matrix_v.append(cm_lrc_v)

                        acc_lrc_t= accuracy_score(y_train,m.predict(x_train))
                        prc_lrc_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_lrc_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_lrc_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_lrc_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_lrc_t*100)
                        precision_t.append(prc_lrc_t*100)
                        recall_t.append(rec_lrc_t*100)
                        f1_t.append(f_lrc_t*100)
                        confusion_matrix_t.append(cm_lrc_t)
                    elif i=='bagging classifier':
                        m=BaggingClassifier()
                        m.fit(x_train,y_train)
                        acc_bc_v= accuracy_score(y_test,m.predict(x_test))
                        prc_bc_v= precision_score(y_test,m.predict(x_test),average='macro')
                        rec_bc_v=recall_score(y_test,m.predict(x_test),average='macro')
                        f_bc_v=f1_score(y_test,m.predict(x_test),average='macro')
                        cm_bc_v=confusion_matrix(y_test,m.predict(x_test))
                        accuracy_v.append(acc_bc_v*100)
                        precision_v.append(prc_bc_v*100)
                        recall_v.append(rec_bc_v*100)
                        f1_v.append(f_bc_v*100)
                        confusion_matrix_v.append(cm_bc_v)

                        acc_bc_t= accuracy_score(y_train,m.predict(x_train))
                        prc_bc_t= precision_score(y_train,m.predict(x_train),average='macro')
                        rec_bc_t=recall_score(y_train,m.predict(x_train),average='macro')
                        f_bc_t=f1_score(y_train,m.predict(x_train),average='macro')
                        cm_bc_t=confusion_matrix(y_train,m.predict(x_train))
                        accuracy_t.append(acc_bc_t*100)
                        precision_t.append(prc_bc_t*100)
                        recall_t.append(rec_bc_t*100)
                        f1_t.append(f_bc_t*100)
                        confusion_matrix_t.append(cm_bc_t)
                dat['training-accuracy']=accuracy_t
                dat['training-precision']=precision_t
                dat['training-recall']=recall_t
                dat['training-f1']=f1_t
                dat['training-confusion matrix']=confusion_matrix_t
                dat['validation-accuracy']=accuracy_v
                dat['validation-precision']=precision_v
                dat['validation-recall']=recall_v
                dat['validation-f1']=f1_v
                dat['validation-confusion matrix']=confusion_matrix_v
                return dat
def get_metric_plot_classification(dat,subset,metric):
                plt.figure(figsize=(10,10))
                return sns.barplot(data=dat,x=str(str(subset)+'-'+str(metric)),y='model')
def get_confusion_matrix(dat,subset):
                if subset=='training':
                    for i,j in zip(dat['validation-confusion matrix'],dat['model']):
                        a=len(dat['training-confusion matrix'])
                        plt.figure(figsize=(16,16))
                        plt.subplot(a,1,1)
                        print(j)
                        sns.heatmap(i,annot=True)
                else:
                    for i,j in zip(dat['validation-confusion matrix'],dat['model']):
                        a=len(dat['validation-confusion matrix'])
                        plt.figure(figsize=(16,16))
                        plt.subplot(a,1,1)
                        print(j)
                        sns.heatmap(i,annot=True)
def train_and_log_regression(x_train,x_test,y_train,y_test):
                model=['linear regression','sgd regression','ridge regression','elastic net','decision tree regression','random forest regression','adaboost regression','gradient boost regression','xgboost regression','bagging regression','hist gradient boosting regression']
                dat=pd.DataFrame(columns=['model', 'training-mae','training-mse','training-mape','training-r2','training-msle','training-median absolute error','training-maximum error','validation-mae','validation-mse','validation-mape','validation-r2','validation-msle','validation-median absolute error','validation-maximum error'])
                dat['model']=model
                mean_absolute_t=[]
                mean_squared_t=[]
                mean_absolute_percentage_t=[]
                r2_t=[]
                mean_squared_log_t=[]
                median_absolute_t=[]
                maximum_t=[]
                mean_absolute_v=[]
                mean_squared_v=[]
                mean_absolute_percentage_v=[]
                r2_v=[]
                mean_squared_log_v=[]
                median_absolute_v=[]
                maximum_v=[]
                for i in model:
                    if i=='linear regression':
                        m=LinearRegression()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='sgd regression':
                        m=SGDRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='ridge regression':
                        m=Ridge()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='elastic net':
                        m=ElasticNet()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='decision tree regression':
                        m=DecisionTreeRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='random forest regression':
                        m=RandomForestRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='adaboost regression':
                        m=AdaBoostRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='gradient boost regression':
                        m=GradientBoostingRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='xgboost regression':
                        m=XGBRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='bagging regression':
                        m=BaggingRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                    elif i=='hist gradient boosting regression':
                        m=HistGradientBoostingRegressor()
                        m.fit(x_train,y_train)
                        mae_lr_t=mean_absolute_error(y_train,m.predict(x_train))
                        mse_lr_t=mean_squared_error(y_train,m.predict(x_train))
                        mape_lr_t=mean_absolute_percentage_error(y_train,m.predict(x_train))
                        msle_lr_t=mean_squared_log_error(y_train,m.predict(x_train))
                        r2_lr_t=r2_score(y_train,m.predict(x_train))
                        median_ae_lr_t=median_absolute_error(y_train,m.predict(x_train))
                        me_lr_t=max_error(y_train,m.predict(x_train))
                        mean_absolute_t.append(mae_lr_t)
                        mean_squared_t.append(mse_lr_t)
                        mean_absolute_percentage_t.append(mape_lr_t)
                        r2_t.append(r2_lr_t)
                        mean_squared_log_t.append(msle_lr_t)
                        median_absolute_t.append(median_ae_lr_t)
                        maximum_t.append(me_lr_t)

                        mae_lr_v=mean_absolute_error(y_test,m.predict(x_test))
                        mse_lr_v=mean_squared_error(y_test,m.predict(x_test))
                        mape_lr_v=mean_absolute_percentage_error(y_test,m.predict(x_test))
                        msle_lr_v=mean_squared_log_error(y_test,m.predict(x_test))
                        r2_lr_v=r2_score(y_test,m.predict(x_test))
                        median_ae_lr_v=median_absolute_error(y_test,m.predict(x_test))
                        me_lr_v=max_error(y_test,m.predict(x_test))
                        mean_absolute_v.append(mae_lr_v)
                        mean_squared_v.append(mse_lr_v)
                        mean_absolute_percentage_v.append(mape_lr_v)
                        r2_v.append(r2_lr_v)
                        mean_squared_log_v.append(msle_lr_v)
                        median_absolute_v.append(median_ae_lr_v)
                        maximum_v.append(me_lr_v)
                dat['training-mae']=mean_absolute_t
                dat['training-mse']=mean_squared_t
                dat['training-mape']=mean_absolute_percentage_t
                dat['training-r2']=r2_t
                dat['training-msle']=mean_squared_log_t
                dat['training-median absolute error']=median_absolute_v
                dat['training-maximum error']=maximum_v
                dat['validation-mae']=mean_absolute_v
                dat['validation-mse']=mean_squared_v
                dat['validation-mape']=mean_absolute_percentage_v
                dat['validation-r2']=r2_v
                dat['validation-msle']=mean_squared_log_v
                dat['validation-median absolute error']=median_absolute_v
                dat['validation-maximum error']=maximum_v
                return dat
def get_metric_plots_regression(dat,subset,metric):
            plt.figure(figsize=(10,10))
            return sns.barplot(data=dat,x=str(str(subset)+'-'+str(metric)),y='model')